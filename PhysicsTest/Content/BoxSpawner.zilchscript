// MIT Licensed (see LICENSE.md).

class BoxSpawner : ZilchComponent
{
  [Property] var ObjectToSpawn: Archetype = null;
  [Property] var SpawnCoolDown: Real = 0.1;
  [Property] var SpawnBatchSize = 10;
  var CurrentCoolDown: Real = 0;
  var SpawnCount: Integer = 0;
  var StopSpawning: Boolean = false;
  
  var Cogs : Array[Cog] = Array[Cog]();
  var CustomMaterials: Array[Material] = Array[Material]();
  var BoxMaterial: Material = Material.FindOrNull("Box");
  var UseCustomMaterials: Boolean = false;
  
  var PRNG : Random = Random();
  
  function Initialize(init : CogInitializer)
  {    
    this.CurrentCoolDown = this.SpawnCoolDown;
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    if(Zero.Keyboard.KeyIsPressed(Keys.Space))
    {
      this.StopSpawning = !this.StopSpawning;
    }
    
    if(Zero.Keyboard.KeyIsPressed(Keys.M))
    {
      this.ChangeMaterials();
    }
    
    if(this.CurrentCoolDown <= 0)
    {
      this.SpawnCubes();
      this.CurrentCoolDown = this.SpawnCoolDown;
    }
    this.CurrentCoolDown -= event.Dt;
  }
  
  function SpawnCubes()
  {
    if(this.SpawnCount >= 8000)
    {    
      this.StopSpawning = true;
    }
    
    if(this.ObjectToSpawn == null || this.StopSpawning)
    {
        return;
    }
    
    for(var i = 0; i < this.SpawnBatchSize; ++i)
    {
      var position = Real3(this.PRNG.Range(-50, 50), 80, this.PRNG.Range(-50, 50));
      var cog = this.Space.CreateAtPosition(this.ObjectToSpawn, position);
      this.Cogs.Push(cog);
      this.CustomMaterials.Push(null);
      
      if(this.UseCustomMaterials)
      {
        this.CustomMaterials[i] = this.CreateMaterial();
        cog.Model.Material = this.CustomMaterials[i];
      }
      
      ++this.SpawnCount;
      
      this.GameSession.DispatchEvent(Events.CounterUpdate, new HUDEvent() { Value = this.SpawnCount });
    }
  }
  
  function CreateMaterial() : Material
  {
    var material = this.BoxMaterial.RuntimeClone();
    var r = this.PRNG.RangeInclusiveMax(0, 255);
    var b = this.PRNG.RangeInclusiveMax(0, 255);
    var g = this.PRNG.RangeInclusiveMax(0, 255);
    material.AlbedoValue.AlbedoValue = Color.FromBytes(r, g, b, 1);
      
    return material;  
  }
  
  function ChangeMaterials()
  {
    this.UseCustomMaterials = !this.UseCustomMaterials;
    for(var i = 0; i < this.SpawnCount; ++i)
    {
      if(this.UseCustomMaterials)
      {
        if(this.CustomMaterials[i] == null)
        {
          this.CustomMaterials[i] = this.CreateMaterial();
        }
        
        this.Cogs[i].Model.Material = this.CustomMaterials[i];
      }else{
        this.Cogs[i].Model.Material = this.BoxMaterial;
        this.CustomMaterials[i] = null;
      }
    }
  }
}
